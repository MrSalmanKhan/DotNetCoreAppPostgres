@model Product

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-6">

        <form asp-action="Edit" onsubmit="return onFormSubmit(event, this);">
            @Html.AntiForgeryToken()

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="form-group mb-3">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="4" id="Description"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="d-flex gap-2 align-items-center">
                <!-- Save button -->
                <button type="submit" id="saveBtn" class="btn btn-primary">
                    Save
                </button>

                <!-- Generate AI button -->
                <button type="button"
                        id="generateBtn"
                        class="btn btn-success"
                        onclick="submitWithSpinner(this, '@Url.Action("GenerateDescription","Products", new { id = Model.Id })')">
                    Generate AI Description
                </button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Message"] != null)
{
    <div class="alert alert-info mt-3">@TempData["Message"]</div>
}

<div class="mt-3">
    <a asp-action="Display">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Handles normal Save button submit
        function onFormSubmit(e, form) {
            var saveBtn = document.getElementById("saveBtn");
            showButtonSpinner(saveBtn, "Saving...");
            return true; // allow form submission
        }

        // Handles Generate button submit
        function submitWithSpinner(button, actionUrl) {
            var form = button.form;
            if (!form) return;

            showButtonSpinner(button, "Generating...");

            // set form action & method for Generate endpoint
            form.action = actionUrl;
            form.method = 'post';

            setTimeout(function () {
                form.submit();
            }, 50); // short delay so spinner renders
        }

        // Replace button text with spinner
        function showButtonSpinner(btn, loadingText) {
            if (!btn) return;

            btn.disabled = true;
            btn.innerHTML =
                '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>' +
                loadingText;
        }
    </script>
}
